/** PURE_IMPORTS_START _subscribeToArray,_subscribeToPromise,_subscribeToIterable,_subscribeToObservable,_isArrayLike,_isPromise,_isObject,_symbol_iterator,_symbol_observable PURE_IMPORTS_END */
import {subscribeToArray} from 'rxjs/internal/util/subscribeToArray';
import {subscribeToPromise} from 'rxjs/internal/util/subscribeToPromise';
import {subscribeToIterable} from 'rxjs/internal/util/subscribeToIterable';
import {subscribeToObservable} from 'rxjs/internal/util/subscribeToObservable';
import {isArrayLike} from 'rxjs/internal/util/isArrayLike';
import {isPromise} from 'rxjs/internal/util/isPromise';
import {isObject} from 'rxjs/internal/util/isObject';
import {iterator as Symbol_iterator} from 'rxjs/internal/symbol/iterator';
import {observable as Symbol_observable} from 'rxjs/internal/symbol/observable';

export var subscribeTo = function (result) {
    if (!!result && typeof result[Symbol_observable] === 'function') {
        return subscribeToObservable(result);
    } else if (isArrayLike(result)) {
        return subscribeToArray(result);
    } else if (isPromise(result)) {
        return subscribeToPromise(result);
    } else if (!!result && typeof result[Symbol_iterator] === 'function') {
        return subscribeToIterable(result);
    } else {
        var value = isObject(result) ? 'an invalid object' : "'" + result + "'";
        var msg = "You provided " + value + " where a stream was expected."
            + ' You can provide an Observable, Promise, Array, or Iterable.';
        throw new TypeError(msg);
    }
};
//# sourceMappingURL=subscribeTo.js.map
