import {scheduleObservable} from 'rxjs/src/internal/scheduled/scheduleObservable';
import {schedulePromise} from 'rxjs/src/internal/scheduled/schedulePromise';
import {scheduleArray} from 'rxjs/src/internal/scheduled/scheduleArray';
import {scheduleIterable} from 'rxjs/src/internal/scheduled/scheduleIterable';
import {Observable, ObservableInput, SchedulerLike} from 'rxjs';
import {isInteropObservable} from 'rxjs/src/internal/util/isInteropObservable';
import {isPromise} from 'rxjs/src/internal/util/isPromise';
import {isArrayLike} from 'rxjs/src/internal/util/isArrayLike';
import {isIterable} from 'rxjs/src/internal/util/isIterable';

/**
 * Converts from a common {@link ObservableInput} type to an observable where subscription and emissions
 * are scheduled on the provided scheduler.
 *
 * @see from
 * @see of
 *
 * @param input The observable, array, promise, iterable, etc you would like to schedule
 * @param scheduler The scheduler to use to schedule the subscription and emissions from
 * the returned observable.
 */
export function scheduled<T>(input: ObservableInput<T>, scheduler: SchedulerLike): Observable<T> {
    if (input != null) {
        if (isInteropObservable(input)) {
            return scheduleObservable(input, scheduler);
        } else if (isPromise(input)) {
            return schedulePromise(input, scheduler);
        } else if (isArrayLike(input)) {
            return scheduleArray(input, scheduler);
        } else if (isIterable(input) || typeof input === 'string') {
            return scheduleIterable(input, scheduler);
        }
    }

    throw new TypeError((input !== null && typeof input || input) + ' is not observable');
}
