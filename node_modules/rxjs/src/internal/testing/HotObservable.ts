import {Subject} from 'rxjs/src/internal/Subject';
import {Subscriber} from 'rxjs/src/internal/Subscriber';
import {Subscription} from 'rxjs/src/internal/Subscription';
import {Scheduler} from 'rxjs/src/internal/Scheduler';
import {TestMessage} from 'rxjs/src/internal/testing/TestMessage';
import {SubscriptionLog} from 'rxjs/src/internal/testing/SubscriptionLog';
import {SubscriptionLoggable} from 'rxjs/src/internal/testing/SubscriptionLoggable';
import {applyMixins} from 'rxjs/src/internal/util/applyMixins';

/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
export class HotObservable<T> extends Subject<T> implements SubscriptionLoggable {
    public subscriptions: SubscriptionLog[] = [];
    scheduler: Scheduler;
    logSubscribedFrame: () => number;
    logUnsubscribedFrame: (index: number) => void;

    constructor(public messages: TestMessage[],
                scheduler: Scheduler) {
        super();
        this.scheduler = scheduler;
    }

    /** @deprecated This is an internal implementation detail, do not use. */
    _subscribe(subscriber: Subscriber<any>): Subscription {
        const subject: HotObservable<T> = this;
        const index = subject.logSubscribedFrame();
        const subscription = new Subscription();
        subscription.add(new Subscription(() => {
            subject.logUnsubscribedFrame(index);
        }));
        subscription.add(super._subscribe(subscriber));
        return subscription;
    }

    setup() {
        const subject = this;
        const messagesLength = subject.messages.length;
        /* tslint:disable:no-var-keyword */
        for (var i = 0; i < messagesLength; i++) {
            (() => {
                var message = subject.messages[i];
                /* tslint:enable */
                subject.scheduler.schedule(
                    () => {
                        message.notification.observe(subject);
                    },
                    message.frame
                );
            })();
        }
    }
}

applyMixins(HotObservable, [SubscriptionLoggable]);
