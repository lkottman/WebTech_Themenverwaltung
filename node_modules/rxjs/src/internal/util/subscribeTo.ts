import {ObservableInput} from 'rxjs/src/internal/types';
import {subscribeToArray} from 'rxjs/src/internal/util/subscribeToArray';
import {subscribeToPromise} from 'rxjs/src/internal/util/subscribeToPromise';
import {subscribeToIterable} from 'rxjs/src/internal/util/subscribeToIterable';
import {subscribeToObservable} from 'rxjs/src/internal/util/subscribeToObservable';
import {isArrayLike} from 'rxjs/src/internal/util/isArrayLike';
import {isPromise} from 'rxjs/src/internal/util/isPromise';
import {isObject} from 'rxjs/src/internal/util/isObject';
import {iterator as Symbol_iterator} from 'rxjs/src/internal/symbol/iterator';
import {observable as Symbol_observable} from 'rxjs/src/internal/symbol/observable';
import {Subscription} from 'rxjs/src/internal/Subscription';
import {Subscriber} from 'rxjs/src/internal/Subscriber';

export const subscribeTo = <T>(result: ObservableInput<T>): (subscriber: Subscriber<T>) => Subscription | void => {
    if (!!result && typeof result[Symbol_observable] === 'function') {
        return subscribeToObservable(result as any);
    } else if (isArrayLike(result)) {
        return subscribeToArray(result);
    } else if (isPromise(result)) {
        return subscribeToPromise(result as Promise<any>);
    } else if (!!result && typeof result[Symbol_iterator] === 'function') {
        return subscribeToIterable(result as any);
    } else {
        const value = isObject(result) ? 'an invalid object' : `'${result}'`;
        const msg = `You provided ${value} where a stream was expected.`
            + ' You can provide an Observable, Promise, Array, or Iterable.';
        throw new TypeError(msg);
    }
};
