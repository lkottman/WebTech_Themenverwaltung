import {Subscription} from 'rxjs/src/internal/Subscription';
import {InnerSubscriber} from 'rxjs/src/internal/InnerSubscriber';
import {OuterSubscriber} from 'rxjs/src/internal/OuterSubscriber';
import {Subscriber} from 'rxjs/src/internal/Subscriber';
import {subscribeTo} from 'rxjs/src/internal/util/subscribeTo';
import {Observable} from 'rxjs/src/internal/Observable';

export function subscribeToResult<T, R>(
    outerSubscriber: OuterSubscriber<T, R>,
    result: any,
    outerValue: undefined,
    outerIndex: undefined,
    innerSubscriber: InnerSubscriber<T, R>
): Subscription | undefined;

export function subscribeToResult<T, R>(
    outerSubscriber: OuterSubscriber<T, R>,
    result: any,
    outerValue?: T,
    outerIndex?: number
): Subscription | undefined;

export function subscribeToResult<T, R>(
    outerSubscriber: OuterSubscriber<T, R>,
    result: any,
    outerValue?: T,
    outerIndex?: number,
    innerSubscriber: Subscriber<R> = new InnerSubscriber(outerSubscriber, outerValue, outerIndex)
): Subscription | undefined {
    if (innerSubscriber.closed) {
        return undefined;
    }
    if (result instanceof Observable) {
        return result.subscribe(innerSubscriber);
    }
    return subscribeTo(result)(innerSubscriber) as Subscription;
}
