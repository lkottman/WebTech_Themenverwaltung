import {Operator} from 'rxjs/internal/Operator';
import {Subscriber} from 'rxjs/internal/Subscriber';
import {Subscription} from 'rxjs/internal/Subscription';
import {OuterSubscriber} from 'rxjs/internal/OuterSubscriber';
import {InnerSubscriber} from 'rxjs/internal/InnerSubscriber';
import {ObservableInput, ObservedValueOf, OperatorFunction} from 'rxjs/internal/types';

export declare function mergeMap<T, O extends ObservableInput<any>>(project: (value: T, index: number) => O, concurrent?: number): OperatorFunction<T, ObservedValueOf<O>>;
/** @deprecated resultSelector no longer supported, use inner map instead */
export declare function mergeMap<T, O extends ObservableInput<any>>(project: (value: T, index: number) => O, resultSelector: undefined, concurrent?: number): OperatorFunction<T, ObservedValueOf<O>>;
/** @deprecated resultSelector no longer supported, use inner map instead */
export declare function mergeMap<T, R, O extends ObservableInput<any>>(project: (value: T, index: number) => O, resultSelector: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R, concurrent?: number): OperatorFunction<T, R>;

export declare class MergeMapOperator<T, R> implements Operator<T, R> {
    private project;
    private concurrent;

    constructor(project: (value: T, index: number) => ObservableInput<R>, concurrent?: number);

    call(observer: Subscriber<R>, source: any): any;
}

/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
export declare class MergeMapSubscriber<T, R> extends OuterSubscriber<T, R> {
    protected index: number;
    private project;
    private concurrent;
    private hasCompleted;
    private buffer;
    private active;
    private _innerSub;

    constructor(destination: Subscriber<R>, project: (value: T, index: number) => ObservableInput<R>, concurrent?: number);

    notifyNext(outerValue: T, innerValue: R, outerIndex: number, innerIndex: number, innerSub: InnerSubscriber<T, R>): void;

    notifyComplete(innerSub: Subscription): void;

    protected _next(value: T): void;

    protected _tryNext(value: T): void;

    protected _complete(): void;
}
