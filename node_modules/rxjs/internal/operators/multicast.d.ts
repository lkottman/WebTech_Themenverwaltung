import {Subject} from 'rxjs/internal/Subject';
import {Operator} from 'rxjs/internal/Operator';
import {Subscriber} from 'rxjs/internal/Subscriber';
import {Observable} from 'rxjs/internal/Observable';
import {ConnectableObservable} from 'rxjs/internal/observable/ConnectableObservable';
import {
    ObservableInput,
    ObservedValueOf,
    OperatorFunction,
    UnaryFunction
} from 'rxjs/internal/types';

export declare function multicast<T>(subject: Subject<T>): UnaryFunction<Observable<T>, ConnectableObservable<T>>;
export declare function multicast<T, O extends ObservableInput<any>>(subject: Subject<T>, selector: (shared: Observable<T>) => O): UnaryFunction<Observable<T>, ConnectableObservable<ObservedValueOf<O>>>;
export declare function multicast<T>(subjectFactory: (this: Observable<T>) => Subject<T>): UnaryFunction<Observable<T>, ConnectableObservable<T>>;
export declare function multicast<T, O extends ObservableInput<any>>(SubjectFactory: (this: Observable<T>) => Subject<T>, selector: (shared: Observable<T>) => O): OperatorFunction<T, ObservedValueOf<O>>;

export declare class MulticastOperator<T, R> implements Operator<T, R> {
    private subjectFactory;
    private selector;

    constructor(subjectFactory: () => Subject<T>, selector: (source: Observable<T>) => Observable<R>);

    call(subscriber: Subscriber<R>, source: any): any;
}
