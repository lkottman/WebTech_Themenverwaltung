import {Observable} from 'rxjs/_esm2015/internal/Observable';
import {from} from 'rxjs/_esm2015/internal/observable/from';
import {isArray} from 'rxjs/_esm2015/internal/util/isArray';
import {EMPTY} from 'rxjs/_esm2015/internal/observable/empty';

export function onErrorResumeNext(...sources) {
    if (sources.length === 0) {
        return EMPTY;
    }
    const [first, ...remainder] = sources;
    if (sources.length === 1 && isArray(first)) {
        return onErrorResumeNext(...first);
    }
    return new Observable(subscriber => {
        const subNext = () => subscriber.add(onErrorResumeNext(...remainder).subscribe(subscriber));
        return from(first).subscribe({
            next(value) {
                subscriber.next(value);
            },
            error: subNext,
            complete: subNext,
        });
    });
}

//# sourceMappingURL=onErrorResumeNext.js.map