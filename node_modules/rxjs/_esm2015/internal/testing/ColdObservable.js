import {Observable} from 'rxjs/_esm2015/internal/Observable';
import {Subscription} from 'rxjs/_esm2015/internal/Subscription';
import {SubscriptionLoggable} from 'rxjs/_esm2015/internal/testing/SubscriptionLoggable';
import {applyMixins} from 'rxjs/_esm2015/internal/util/applyMixins';

export class ColdObservable extends Observable {
    constructor(messages, scheduler) {
        super(function (subscriber) {
            const observable = this;
            const index = observable.logSubscribedFrame();
            const subscription = new Subscription();
            subscription.add(new Subscription(() => {
                observable.logUnsubscribedFrame(index);
            }));
            observable.scheduleMessages(subscriber);
            return subscription;
        });
        this.messages = messages;
        this.subscriptions = [];
        this.scheduler = scheduler;
    }

    scheduleMessages(subscriber) {
        const messagesLength = this.messages.length;
        for (let i = 0; i < messagesLength; i++) {
            const message = this.messages[i];
            subscriber.add(this.scheduler.schedule(({message, subscriber}) => {
                message.notification.observe(subscriber);
            }, message.frame, {message, subscriber}));
        }
    }
}

applyMixins(ColdObservable, [SubscriptionLoggable]);
//# sourceMappingURL=ColdObservable.js.map